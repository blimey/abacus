        [Test]
        public void TestStaticFn_CreateFromAxisAngle_i ()
        {
            Vector3 axis = new Vector3 ((<#=T#>) 1, (<#=T#>) 2, (<#=T#>) (-3));
            Vector3.Normalise (ref axis, out axis);
            <#=T#> angle; Maths.Pi (out angle); angle /= (<#=T#>) 3;

            Quaternion q;
            Quaternion.CreateFromAxisAngle (ref axis, ref angle, out q);

            Quaternion expected = new Quaternion (
                (<#=T#>) ( 0.1336306),
                (<#=T#>) ( 0.2672612),
                (<#=T#>) (-0.4008918),
                (<#=T#>) ( 0.8660254));

            AssertEqualWithinReason (q, expected);
        }

        [Test]
        public void TestStaticFn_CreateFromYawPitchRoll_i ()
        {
            <#=T#> yaw; Maths.Pi(out yaw); yaw /= (<#=T#>) 4;
            <#=T#> pitch; Maths.Pi(out pitch); pitch /= (<#=T#>) (-8);
            <#=T#> roll; Maths.Pi(out roll); roll /= (<#=T#>) 2;

            Quaternion q; Quaternion.CreateFromYawPitchRoll(ref yaw, ref pitch, ref roll, out q);

            Quaternion expected = new Quaternion (
                (<#=T#>) (0.1379497),
                (<#=T#>) (0.3928475),
                (<#=T#>) (0.6935199),
                (<#=T#>) (0.5879378));

            AssertEqualWithinReason (q, expected);
        }

        [Test]
        public void TestStaticFn_CreateFromRotationMatrix_i ()
        {
            Matrix44 m = new Matrix44 ();
            m.R0C0 = (<#=T#>) (-0.9137071674171720);
            m.R0C1 = (<#=T#>) (-0.4045084971874740);
            m.R0C2 = (<#=T#>) (-0.0388855746211755);
            m.R0C3 = 0;

            m.R1C0 = (<#=T#>) (-0.0612616567188929);
            m.R1C1 = (<#=T#>)  (0.0425155562553572);
            m.R1C2 = (<#=T#>)  (0.9972158426801860);
            m.R1C3 = 0;

            m.R2C0 = (<#=T#>) (-0.4017290400587740);
            m.R2C1 = (<#=T#>)  (0.9135454576426010);
            m.R2C2 = (<#=T#>) (-0.0636276291718221);
            m.R2C3 = 0;

            m.R3C0 = 0;
            m.R3C1 = 0;
            m.R3C2 = 0;
            m.R3C3 = 1;

            Quaternion q; Quaternion.CreateFromRotationMatrix (ref m, out q);

            Quaternion expected = new Quaternion (
                (<#=T#>) (-0.163863438188094),
                (<#=T#>) (0.7106071968472370),
                (<#=T#>) (0.6722283804612080),
                (<#=T#>) (-0.127652614217613));

            AssertEqualWithinReason (q, expected);
        }

