        [Test]
        public void TestStaticFn_CreateTranslation_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateTranslation_ii ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateScale_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateScale_ii ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateScale_iii ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateRotationX_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateRotationY_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateRotationZ_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateFromAxisAngle_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateFromCartesianAxes_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateWorld_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateFromQuaternion_i ()
        {
            <#=T#> yaw; Maths.Pi(out yaw); yaw /= (<#=T#>) 4;
            <#=T#> pitch; Maths.Pi(out pitch); pitch /= (<#=T#>) (-8);
            <#=T#> roll; Maths.Pi(out roll); roll /= (<#=T#>) 2;

            Quaternion q; Quaternion.CreateFromYawPitchRoll(ref yaw, ref pitch, ref roll, out q);
            q.Normalise();

            Matrix44 m; Matrix44.CreateFromQuaternion(ref q, out m);

            Matrix44 expected = new Matrix44 ();
            expected.R0C0 = (<#=T#>) (-0.270598);
            expected.R0C1 = (<#=T#>) 0.9238795;
            expected.R0C2 = (<#=T#>) (-0.270598);
            expected.R0C3 = 0;

            expected.R1C0 = (<#=T#>) (-0.7071067);
            expected.R1C1 = 0;
            expected.R1C2 = (<#=T#>) 0.7071067;
            expected.R1C3 = 0;

            expected.R2C0 = (<#=T#>) 0.6532815;
            expected.R2C1 = (<#=T#>) 0.3826834;
            expected.R2C2 = (<#=T#>) 0.6532815;
            expected.R2C3 = 0;

            expected.R3C0 = 0;
            expected.R3C1 = 0;
            expected.R3C2 = 0;
            expected.R3C3 = 1;

            AssertEqualWithinReason (m, expected);
        }

        [Test]
        public void TestStaticFn_CreateFromQuaternion_ii ()
        {
            Quaternion q = new Quaternion (
                (<#=T#>) (-0.163863438188094),
                (<#=T#>) (0.7106071968472370),
                (<#=T#>) (0.6722283804612080),
                (<#=T#>) (-0.127652614217613));

            Matrix44 m; Matrix44.CreateFromQuaternion(ref q, out m);

            Matrix44 expected = new Matrix44 ();
            expected.R0C0 = (<#=T#>) (-0.9137071674171720);
            expected.R0C1 = (<#=T#>) (-0.4045084971874740);
            expected.R0C2 = (<#=T#>) (-0.0388855746211755);
            expected.R0C3 = 0;

            expected.R1C0 = (<#=T#>) (-0.0612616567188929);
            expected.R1C1 = (<#=T#>)  (0.0425155562553572);
            expected.R1C2 = (<#=T#>)  (0.9972158426801860);
            expected.R1C3 = 0;

            expected.R2C0 = (<#=T#>) (-0.4017290400587740);
            expected.R2C1 = (<#=T#>)  (0.9135454576426010);
            expected.R2C2 = (<#=T#>) (-0.0636276291718221);
            expected.R2C3 = 0;

            expected.R3C0 = 0;
            expected.R3C1 = 0;
            expected.R3C2 = 0;
            expected.R3C3 = 1;

            AssertEqualWithinReason (m, expected);
        }

        /// <summary>
        /// Assert that, for a number of examples, a random quaternion can be
        /// selected, converted to a Matrix44 then converted back to the same
        /// quaternion (assuming that the conversion back is correct).
        /// </summary>
        [Test]
        public void TestStaticFn_CreateFromQuaternion_iii ()
        {
            for (Int32 i = 0; i < 100; ++i)
            {
                Quaternion q = QuaternionTests.GetNextRandomQuaternion();
                Quaternion.Normalise(ref q, out q);

                Matrix44 m;
                Matrix44.CreateFromQuaternion(ref q, out m);

                Quaternion q2;
                Quaternion.CreateFromRotationMatrix(ref m, out q2);

                // TODO: Investigate.  This is odd, for a few tests this
                // would fail, until it was changed to allow for negated
                // quaternions.  I'm not sure if it makes sense or not, but,
                // I have compared with XNA, and Abacus is producing the
                // same results.  So, until I find out more, I'll assume
                // that XNA behaves correctly and the comparing to a negated
                // version of the expected quaternion is acceptable.
                // PS: If anyone knows more, I'm keen to hear from you.
                QuaternionTests.AssertEqualOrNegatedWithinReason (q, q2);
            }
        }

        [Test]
        public void TestStaticFn_CreateFromYawPitchRoll_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateBillboard_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateConstrainedBillboard_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreatePerspectiveFieldOfView_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreatePerspective_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreatePerspectiveOffCenter_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateOrthographic_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateOrthographicOffCenter_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestStaticFn_CreateLookAt_i ()
        {
            throw new InconclusiveException("Not Implemented");
        }

